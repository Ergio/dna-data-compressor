{"version":3,"file":"dna-data-compressor.umd.js","sources":["../src/dna-data-compressor.ts"],"sourcesContent":["// Import here Polyfills if needed. Recommended core-js (npm i -D core-js)\n// import \"core-js/fn/array.find\"\n// ...\ninterface NucleotidesToNumbersMap {\n  [nucleotides: string]: number;\n}\n\ninterface NumbersToNucleotidesMap {\n  [numbers: number]: string;\n}\nexport default class Compressor {\n  static sequenceToBinaryData(sequenceString: string): ArrayBuffer {\n    // define nucleotides and their binary equivalents\n    const NUCLEOTIDE_TO_BIN: NucleotidesToNumbersMap = {\n      'A': 0,    // 0b00\n      'C': 1,    // 0b01\n      'G': 2,    // 0b10\n      'T': 3     // 0b11\n    };\n\n    const getTetrapletMap = (): NucleotidesToNumbersMap => {\n      const nucleotides = Object.keys(NUCLEOTIDE_TO_BIN);\n      const tetrapletsMap: NucleotidesToNumbersMap = {};\n      for (const n1 of nucleotides) {\n        for (const n2 of nucleotides) {\n          for (const n3 of nucleotides) {\n            for (const n4 of nucleotides) {\n              const binaryValue = NUCLEOTIDE_TO_BIN[n1] |\n                (NUCLEOTIDE_TO_BIN[n2] << 2) |\n                (NUCLEOTIDE_TO_BIN[n3] << 4) |\n                (NUCLEOTIDE_TO_BIN[n4] << 6);\n\n              tetrapletsMap[n1 + n2 + n3 + n4] = binaryValue;\n            }\n          }\n        }\n      }\n      return tetrapletsMap;\n    };\n\n    // define tetraplets (four nucleotides) and their binary equivalents\n    const TETRAPLET_TO_BIN = getTetrapletMap();\n\n    // filter sequences letters, replace U on T\n    const sequence = sequenceString.toUpperCase()\n      .replace(/\\s/g, '')\n      .replace('U', 'T')\n      .replace(/[^ATGC\\-]/g, '');\n\n    const length = sequence.length;\n    // rough divide on 4\n    const mainLength = length >>> 2;\n    const residues = length & 3;\n    const endPadding = residues ? 4 - residues : 0;\n\n    const bufferSize = residues ? mainLength + 1 : mainLength;\n    // one more byte for end-padding value\n    const buffer = new ArrayBuffer(bufferSize + 1);\n    const binaryDataHandler = new Uint8Array(buffer);\n\n    // position in sequence\n    let pos: number;\n    let byteCounter: number;\n    for (byteCounter = 0; byteCounter < mainLength; byteCounter++) {\n      // multiply on 4\n      pos = byteCounter << 2;\n      const tetraplet = sequence[pos] + sequence[++pos] + sequence[++pos] + sequence[++pos];\n      binaryDataHandler[byteCounter] = TETRAPLET_TO_BIN[tetraplet];\n    }\n\n    if (residues) {\n      pos = byteCounter << 2;\n      const binN1 = NUCLEOTIDE_TO_BIN[sequence[pos]];\n      const binN2 = NUCLEOTIDE_TO_BIN[sequence[++pos]] || 0;\n      const binN3 = NUCLEOTIDE_TO_BIN[sequence[++pos]] || 0;\n      const binN4 = 0;\n      binaryDataHandler[byteCounter] = binN1 | (binN2 << 2) | (binN3 << 4) | binN4;\n    }\n\n    // last byte is using for saving end-padding value\n    binaryDataHandler[++byteCounter] = endPadding;\n\n    return buffer;\n  }\n\n  static binaryDataToSequence(buffer: ArrayBuffer): string {\n    const BIN_TO_NUCLEOTIDE: NumbersToNucleotidesMap = {\n      '0': 'A',    // 0b00\n      '1': 'C',    // 0b01\n      '2': 'G',    // 0b10\n      '3': 'T'     // 0b11\n    };\n\n    const binHandler = new Uint8Array(buffer);\n    let sequence = '';\n    const len: number = binHandler.length - 1;\n    for (let i = 0; i < len; i++) {\n      sequence += BIN_TO_NUCLEOTIDE[binHandler[i] & 3];\n      sequence += BIN_TO_NUCLEOTIDE[(binHandler[i] >>> 2) & 3];\n      sequence += BIN_TO_NUCLEOTIDE[(binHandler[i] >>> 4) & 3];\n      sequence += BIN_TO_NUCLEOTIDE[(binHandler[i] >>> 6) & 3];\n    }\n\n    if (binHandler[len]) {\n      sequence = sequence.slice(0, - binHandler[len]);\n    }\n\n    return sequence;\n  }\n}\n"],"names":[],"mappings":"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"}